datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum ROLE {
  USER
  ADMIN
}

model User {
  id            String          @id @default(cuid())
  name          String?
  email         String          @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  // Optional for WebAuthn support
  Authenticator Authenticator[]

  hashedPassword String?
  role           ROLE    @default(USER)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  debts Debt[]
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String   @id @default(cuid())
  email      String
  token      String   @unique
  expires    DateTime

  @@unique([email, token])
}

model ResetPasswordToken {
  identifier String   @id @default(cuid())
  email      String
  token      String   @unique
  expires    DateTime

  @@unique([email, token])
}

// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
}

enum DebtStatus {
  IN_PROGRESS
  PAID
  CANCELLED
}

enum InstallmentPlanItemStatus {
  UPCOMING
  PAST_DUE
  PAID
}

model Debt {
  id String @id @default(cuid())

  nickname  String
  category  String
  frequency String
  duration  Int        @default(1)
  status    DebtStatus @default(IN_PROGRESS)

  balance               Float
  minimum_payment       Float
  next_payment_due_date String
  tracking_start_date   String
  actual_paid_off_date  String?

  is_mine Boolean? @default(true)

  lendee_name   String?
  lendee_email  String?
  should_notify Boolean? @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user    User   @relation(references: [id], fields: [user_id], onDelete: Cascade)
  user_id String

  installment_plans InstallmentPlanItem[]

  @@unique([nickname, user_id])
  @@index([status])
}

model InstallmentPlanItem {
  id String @id @default(cuid())

  payment_date   String
  payment_amount Float

  actual_payment_date String?

  status InstallmentPlanItemStatus @default(UPCOMING)

  note String?

  debt   Debt   @relation(references: [id], fields: [debtId], onDelete: Cascade)
  debtId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([debtId])
  @@index([status])
}
